I"e(<p>이번 포스팅에서는 <strong>문자열 압축</strong> 이라는 문제를 다룬다. 문제는 <a href="https://programmers.co.kr/learn/courses/30/lessons/60057">프로그래머스</a>를 통해 풀고 오길 바란다.</p>

<p>.</p>

<p><a href="https://github.com/ndb796/python-for-coding-test/blob/master/12/3.cpp">나동빈님의 코드</a>를 짧게 분석해보며 문제에서 얻을 수 있는 포인트들을 챙겨보자.</p>

<p>코드는 다음과 같다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="c1">// 1개 단위(step)부터 압축 단위를 늘려가며 확인</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">step</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">step</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">string</span> <span class="n">compressed</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">step</span><span class="p">);</span> <span class="c1">// 앞에서부터 step만큼의 문자열 추출</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="c1">// 단위(step) 크기만큼 증가시키며 이전 문자열과 비교</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">step</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">step</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 이전 상태와 동일하다면 압축 횟수(count) 증가</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">prev</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">step</span><span class="p">))</span> <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="c1">// 다른 문자열이 나왔다면(더 이상 압축하지 못하는 경우라면)</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">compressed</span> <span class="o">+=</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span><span class="o">?</span> <span class="n">to_string</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span> <span class="o">+</span> <span class="n">prev</span> <span class="o">:</span> <span class="n">prev</span><span class="p">;</span>
                <span class="n">prev</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">step</span><span class="p">);</span> <span class="c1">// 다시 상태 초기화</span>
                <span class="n">cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// 남아있는 문자열에 대해서 처리</span>
        <span class="n">compressed</span> <span class="o">+=</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span><span class="o">?</span> <span class="n">to_string</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span> <span class="o">+</span> <span class="n">prev</span> <span class="o">:</span> <span class="n">prev</span><span class="p">;</span>
        <span class="c1">// 만들어지는 압축 문자열이 가장 짧은 것이 정답</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">compressed</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>.</p>

<p>우선 문제를 접한 후 가장 먼저 <strong>시간 복잡도</strong>에 대하여 생각해봐야 한다.</p>

<p>특정 압축 길이 단위가 주어졌을 때 그 길이를 기준으로 문자열을 압축하는 시간 복잡도는 선형적, $O(n)$ 임을 생각할 수 있다.</p>

<p>문제에서 문자열의 최대 길이는 1000 이라고 명시되어 있다.</p>

<p>우리는 문자열 길이의 반절 길이, 즉 1부터 500까지를 압축 단위로 설정하여 문자열을 압축할 수 있다.</p>

<p>때문에 총 시간복잡도는 $O((n/2)n) = O(n^2)$ 임을 알 수 있다.</p>

<p>기본적으로 이러한 컨셉으로 이 문제에 접근하면 된다.</p>

<p>.</p>

<p>이 문제에서 내가 주목한 부분은 디테일한 것들이다.</p>

<p>그 첫 번째로,</p>

<h3 id="for-문의-처음과-끝에-주목하는-태도">for 문의 처음과 끝에 주목하는 태도</h3>

<p>이다.</p>

<p>이 문제에서는 <strong>끝에 주목</strong>해야 하지만 어떤 문제에서는 처음에 주목해야 할 지 모른다.</p>

<p>나동빈님은 <code class="language-plaintext highlighter-rouge">cnt</code> 를 증가시키며 <code class="language-plaintext highlighter-rouge">cnt</code> 와 <code class="language-plaintext highlighter-rouge">prev</code> 를 통해 압축된 문자열 <code class="language-plaintext highlighter-rouge">compressed</code> 를 만들어 나간다.</p>

<p>이 때 <code class="language-plaintext highlighter-rouge">compressed</code> 가 갱신되는 것은 <code class="language-plaintext highlighter-rouge">else</code> 에 해당할 때이다.</p>

<p><strong>하지만 만약 <code class="language-plaintext highlighter-rouge">for</code> 문의 마지막 경우에서 <code class="language-plaintext highlighter-rouge">else </code> 가 나오지 않는다면?</strong></p>

<p>위와 같은 질문을 하는 것이 아주 중요하며, 나동빈님은 이 질문에 대한 대답으로 <code class="language-plaintext highlighter-rouge">for</code> 문 밖에 <code class="language-plaintext highlighter-rouge">compressed</code> 를 최종적으로 갱신하는 코드를 작성하였다.</p>

<p>.</p>

<p>이 문제에서 챙겨가면 좋을 것들로 cpp 에서 사용하는 string method 들이 있다.</p>

<p>첫 째는 <code class="language-plaintext highlighter-rouge">substr</code> 이며, 둘 째는 <code class="language-plaintext highlighter-rouge">compare</code> , 마지막으로 <code class="language-plaintext highlighter-rouge">to_string</code> 이 있다.</p>

<p><code class="language-plaintext highlighter-rouge">substr</code> 은 <code class="language-plaintext highlighter-rouge">substr(pos, len)</code> 과 같이 사용한다. 자세한 사항은 <a href="https://www.cplusplus.com/reference/string/string/substr/">다음</a>을 참고하자. 가장 중요한 것은 <code class="language-plaintext highlighter-rouge">substr</code> 이 기존 <code class="language-plaintext highlighter-rouge">str</code> 의 길이를 초과하여 부분 문자열을 만들려고 할 때, <strong>method 자체에서 문자열의 최대길이까지만 참고</strong> 한다는 것이다. 이건 분명하게 기억해두자.</p>

<p>둘 째는 <code class="language-plaintext highlighter-rouge">compare</code> 이며 이는 <code class="language-plaintext highlighter-rouge">str1.compare(str2) == 0</code> 과 같은 방법으로 사용되는 데 사실 이건 <code class="language-plaintext highlighter-rouge">str1 == str2</code> 와 같은 기능을 한다.</p>

<p>셋 째는 <code class="language-plaintext highlighter-rouge">to_string</code> 으로 <code class="language-plaintext highlighter-rouge">int</code> 를 문자열로 만들 때 <code class="language-plaintext highlighter-rouge">to_string(3)</code> 과 같이 사용하면 된다.</p>

<p>.</p>

<p>또한 다음과 같이 <code class="language-plaintext highlighter-rouge">compressed += (cnt &gt;= 2)? to_string(cnt) + prev : prev;</code> <strong>삼항 조건 연산자</strong>를 사용할 수 있음을 알아두면 좋다.</p>

<p>나동빈님은 <strong>문자열을 직접 만들어 가며</strong> 그 길이를 참조하셨다. 나는 처음에 이 문제를 풀 때 압축할 수 있든 부분의 개수를 파악해가며 이를 이용하여 압축된 문자열의 길이를 계산하였다. 나동빈님처럼 문자열을 직접 만들 수 있음을 기억하는 것도 좋을 것 같다.</p>
:ET