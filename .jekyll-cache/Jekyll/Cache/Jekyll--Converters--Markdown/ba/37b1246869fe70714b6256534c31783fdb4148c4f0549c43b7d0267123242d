I"f<blockquote>
  <p>아직 완성되지 않은 포스팅이라 후에 작성할 때 기준 삼을 간단한 구조를 미리 첨부한다.</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/56385667/138043536-7eba2bef-75eb-48c8-bbd9-6b21dbbf837d.png" /></p>

<p>Promise</p>

<ol>
  <li>What?
    <ol>
      <li>오브젝트. 오브젝트 안에 오브젝트를 포함하는 형태</li>
      <li>Promise[프로미스]는 자바스크립트에서 비동기 처리에 사용되는 객체라고 한다. 비동기 처리는 코드 실행 후 결과를 받는것을 기다리지 않고 다음 코드를 계속 진행하는 처리 방식을 말한다. (동기 처리는 반대로 앞선 코드를 수행하고 그 결과를 받을 때 까지 기다린 다음에 수행하는 것을 말한다)</li>
    </ol>
  </li>
  <li>await
    <ol>
      <li>기능
        <ol>
          <li>await은 내 메소드의 실행을 일시중지시킵니다. promise의 값이 사용가능할 때까지요.</li>
        </ol>
      </li>
      <li>참조
Link: https://velog.io/@limes/React-Async-await</li>
      <li>Why?
        <ol>
          <li>async/await 키워드를 사용하면 비동기 코드를 마치 동기 코드처럼 보이게 작성할 수 있다.</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>개념 이해를 위한,
    <ol>
      <li>promise 를 사용하여 구현 vs async/await 를 사용하여 구분
        <ol>
          <li>비동기 = promise =&gt; await 를 통해 동기처럼 기능하게 만듦</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>Promise 의 세가지 상태
    <ol>
      <li>Pending(대기)</li>
      <li>Fulfilled(이행)</li>
      <li>Rejected(실패)</li>
      <li>콜백 함수
        <ol>
          <li>resolve</li>
          <li>reject</li>
        </ol>
      </li>
      <li>참조
Link: https://dev-room.tistory.com/61</li>
    </ol>
  </li>
  <li>How?
    <ol>
      <li>Promise 객체에는 정상적으로 비동기 작업이 완료되었을 때 호출하는 <code class="language-plaintext highlighter-rouge">then</code> 이라는 API 가 존재한다. then(param1, param2) 의 형태에서 param1 에는 성공시(promise fulfilled) 호출할 함수를, param2 에는 실패시(promise rejected) 호출할 함수를 선언한다.
        <ol>
          <li>참조
Link: https://programmingsummaries.tistory.com/325</li>
          <li>Error 를 잡는 promise catch api 도 같이 사용할 수 있다</li>
          <li>❓ then 은 비동기를 동기로 만드는 await 의 기능을 내포하는 건가??
            <ol>
              <li>✋🏻 둘 다 비동기를 처리하는 방식임! await 를 써도 되고 then 을 써도 되고 그런거. 같은 기능이긴 함. 근데 뭐가 더 섹시 코드인지는 살펴보아야 할 듯</li>
            </ol>
          </li>
        </ol>
      </li>
    </ol>
  </li>
</ol>
:ET