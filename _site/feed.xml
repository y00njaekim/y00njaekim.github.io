<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://y00njaekim.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://y00njaekim.github.io/" rel="alternate" type="text/html" /><updated>2021-12-20T03:57:03+09:00</updated><id>https://y00njaekim.github.io/feed.xml</id><title type="html">YoonJae’s DevLog</title><subtitle>Computer Engineering and Science, 기록을 통한 기억</subtitle><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><entry><title type="html">[Algorithm] c++ 문자열 split</title><link href="https://y00njaekim.github.io/algorithm/cpp-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%AA%BC%EA%B0%9C%EA%B8%B0/" rel="alternate" type="text/html" title="[Algorithm] c++ 문자열 split" /><published>2021-12-20T00:00:00+09:00</published><updated>2021-12-20T22:06:00+09:00</updated><id>https://y00njaekim.github.io/algorithm/cpp-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%AA%BC%EA%B0%9C%EA%B8%B0</id><content type="html" xml:base="https://y00njaekim.github.io/algorithm/cpp-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%AA%BC%EA%B0%9C%EA%B8%B0/">&lt;p&gt;C++ 로 코딩테스트를 준비하다보면 문자열을 쪼개야 하는 상황이 발생한다. 이 때 문자열을 단 &lt;strong&gt;하나의 문자&lt;/strong&gt;로 쪼개는 경우가 있고 때로는 &lt;strong&gt;문자열&lt;/strong&gt;을 기준으로 쪼개는 경우가 있다. 이 포스팅을 통해 그 일련의 과정을 찬찬히 살펴보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;문자열을 쪼갤 때면 파이썬으로 갈아탈까 하는 생각이 들곤 한다.. 잘 알아두자..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;이 포스팅에서 최종적으로 해결하고자 하는 문제는 다항식 쪼개기이다. 즉 다음과 같은 식을 쪼개는 것을 목표로 하여 코드를 작성해보자.&lt;/p&gt;

\[4x^3 + 5x^2 + 7x\]

&lt;p&gt;위 식을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4x^3 + 5x^2 + 7x^1&lt;/code&gt; 로 표현하자. 우리는 이 식을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4x^3&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5x^2&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7x^1&lt;/code&gt; 로 나눌 것이다.&lt;/p&gt;

&lt;h2 id=&quot;stream-과-buffer&quot;&gt;stream 과 buffer&lt;/h2&gt;

&lt;p&gt;c++ 로 코딩을 하며 자주 사용하는 함수가 있다. 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cin&lt;/code&gt; 과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cout&lt;/code&gt; 이라는 함수이다. 이 함수를 사용하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 이라는 헤더를 임포트 해야한다.&lt;/p&gt;

&lt;p&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 은 input output &lt;strong&gt;stream&lt;/strong&gt; 의 줄인말이다. 한 번 우리가 사용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cin&lt;/code&gt; 과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cout&lt;/code&gt; 의 기능을 떠올리며 stream 의 의미를 직관적으로 생각해보자.&lt;/p&gt;

&lt;p&gt;키보드에서 입력한 무언가를 프로그램해서 사용할 수 있게 가져오는 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cin&lt;/code&gt; 이다. 프로그램에서 작성한 무언가를 콘솔창에서 볼 수 있게 보내주는 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cout&lt;/code&gt; 이다. 즉 키보드의 데이터가 프로그램으로, 프로그램의 데이터가 콘솔창으로 이동할 수 있게 도와주는 헤더가 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 인 것이다.&lt;/p&gt;

&lt;p&gt;이와 같이 데이터의 흐름을 이해할 떄 반드시 알아야 하는 것이 &lt;strong&gt;stream&lt;/strong&gt; 이라는 개념이다. stream 이란 바이트들의 흐름이다. 키보드에서 입력한 데이터가 내가 만든 c++ 프로그램으로 도달하기 까지의 흐름과 c++ 프로그램에서 출력한 데이터가 내 콘솔창에 도달하기 까지의 흐름이다.&lt;/p&gt;

&lt;p&gt;아래 그림과 같이 &lt;strong&gt;stream&lt;/strong&gt; 을 강(river) 이라고 생각해보자. 저 길게 늘어진 물줄기가 내가 작성한 프로그램으로 들어오는 데이터들이다.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146680927-ada5343e-70b2-4712-b937-0e2de74c5e51.jpeg&quot; style=&quot;zoom: 60%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한편, &lt;strong&gt;프로그램은 정보를 한 번에 1 바이트밖에 처리하지 못한다&lt;/strong&gt;. 만약에 디스크에 저장되어 있는 파일로부터 한 번에 한 문자씩만 읽어들인다고 생각해보자. 하나의 글자를 읽을 때마다 매번 디스크에 접근한다고 생각하면 굉장히 비효율적인 방법이다. 이 때 필요한 개념이 &lt;strong&gt;buffer&lt;/strong&gt; 이다. buffer 는 &lt;strong&gt;메모리 레벨&lt;/strong&gt;의 개념으로 디스크에서 데이터를 한번에 받아온 이후 프로그램으로 1 바이트씩 보내주는 역할을 수행한다. 즉 위 그림에서 &lt;strong&gt;댐&lt;/strong&gt; 을 버퍼라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;프로그램은 데이터를 &lt;strong&gt;디스크&lt;/strong&gt; 레벨에서 읽어들이는 것보다 &lt;strong&gt;메모리&lt;/strong&gt; 레벨에서 읽어들이는 것을 훨씬 좋아한다. 훨씬 빠르고 효율적이다. 때문에 하나의 글자를 읽을 때마다 매번 디스크에 접근하는 것보다 디스크의 데이터들을 메모리 (buffer) 에 쌓아놓고 필요한 글자를 하나씩 buffer 에서 읽어오면 된다. 즉 &lt;strong&gt;댐&lt;/strong&gt;에 디스크의 데이터들을 보관해 두었다가 프로그램에 조금씩 흘려보내준다고 생각하자.&lt;/p&gt;

&lt;h2 id=&quot;iostream-의-getline&quot;&gt;iostream 의 getline()&lt;/h2&gt;

&lt;p&gt;자 다시 본론으로 돌아오자. 그래서 어떻게 문자열을 쪼갤 수 있을까? 보통 문자열을 특정 문자에 대해 쪼개기 위해 사용하는 함수로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline()&lt;/code&gt; 이 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt;을 사용하기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 헤더를 임포트 하면된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt; 의 파라미터는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;istream&amp;amp; getline (char* s, streamsize n, char delim );&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;사용할 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;스트림.getline(저장할곳, 받아올문자개수, 구분자)&lt;/code&gt; 의 형태로 작성하면 된다. 구분자의 기본 설정값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt; , 줄바꿈 문자이다.&lt;/p&gt;

&lt;p&gt;더 자세한 사항은 문서를 찾아보면 되고, 사실 이 단락에서 &lt;strong&gt;가장 강조하고 싶은 내용&lt;/strong&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char*&lt;/code&gt; 타입과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 타입을 구분해야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;예시를 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146683519-83be3cea-40df-4bde-93c6-905ff8fcdcbf.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char str[100]&lt;/code&gt; 의 변수에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline()&lt;/code&gt; 을 통해 입력받은 값을 저장하려 한다. 이 때, 받아올 문자의 개수는 10개로 설정하였다. 입력값으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hi World!&lt;/code&gt; 를 받은 후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; 을 출력하여 저장된 값을 확인해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146683570-3eef187e-534c-412e-baeb-5c57610e5d47.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출력 결과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hi World!&lt;/code&gt; 가 잘 저장되어 있음을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;그렇다면 이번에는 Hello World! 를 입력값으로 받아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146683603-32f3a2ad-3047-4e13-b42a-3d3eec783d2c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출력 결과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Wor&lt;/code&gt; 까지만 저장되어 있음을 확인할 수 있다. 이렇게 손실된 데이터가 저장된 이유는 우리가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cin.getline(str, 10)&lt;/code&gt; 와 같이 10개의 문자만 받아오도록 코드를 작성했기 때문이다. (마지막 문자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; 값으로 저장되기 때문에 실제로는 9개의 문자만 저장된다)&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 헤더의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt; 의 한계점이 파악된다. 바로 입력데이터의 최대 개수를 알고있어야 한다는 점이다. 이 점을 극복하기 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sstream&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt; 함수를 사용한다.&lt;/p&gt;

&lt;p&gt;다음 그림에서 알 수 있듯이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stringstream&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 이 등장한 이후에 등장한다. 왜냐하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 헤더가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 헤더 이후에 생성되었기 때문이다. 순서 상 당연하게도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 만을 이용해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 타입의 데이터를 온전히 다루지 못한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 데이터의 흐름을 온전하게 담당하는 &lt;strong&gt;stream&lt;/strong&gt; 을 새롭게 만들었고 이게 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stringstream&lt;/code&gt; 인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sstream&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146683954-b7746270-e81f-405f-ad1f-8fb8c9996098.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 이전에 문자열을 다루는 데이터 타입이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char*&lt;/code&gt; 이다. 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char*&lt;/code&gt; 를 이용하는 함수에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 을 넣으면 다음과 같이 오류가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146683966-8039963c-d8e9-42c9-aa90-38f182d5b50f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146683968-785d8e7a-a028-4033-81de-a346cb7f04fc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char*&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 은 분명하게 다른 것이다.&lt;/p&gt;

&lt;h2 id=&quot;sstream-의-getline&quot;&gt;sstream 의 getline&lt;/h2&gt;

&lt;p&gt;아까 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostream&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt; 사용법은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;스트림.getline(저장할곳, 받아올문자개수, 구분자)&lt;/code&gt; 라고 했었다. 또한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt; 을 사용할 때 받아올 문자 개수를 명확히 선언해야 한다는 것이 한계점으로 다가오는 것을 보았다. 그렇다면 이를 대안하기 위해 사용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sstream&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline&lt;/code&gt; 은 어떻게 사용할까?&lt;/p&gt;

&lt;p&gt;바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getline(스트림, 저장할곳, 구분자)&lt;/code&gt; 의 형태로 사용한다. (더 다양한 사용법과 자세한 사항은 공식 문서를 참고하자)&lt;/p&gt;

&lt;p&gt;아까 실패했던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt; 를 입력으로 받은 후 출력하는 경우를 다시 시도해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146684488-14788a69-13f4-4ad3-b984-d2e8a0627992.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146684508-f3cd4816-063e-409d-b770-842a954723c3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아까와는 달리 온전히 문자열이 출력 되는 것을 알 수 있다. 구분자를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;\n&apos;&lt;/code&gt; 이 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos; &apos;&lt;/code&gt; 로 설정하면 어떤 결과가 나올까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146684583-68253db1-93b9-49cf-8402-9c8818394191.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146684587-cefe04fc-8856-4c04-90f3-9897123103b3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;공백 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos; &apos;&lt;/code&gt; 을 기준으로 쪼개어져 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello&lt;/code&gt; 만이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; 에 저장된 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이 때 기억해야 할 내용은&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 남은 데이터&lt;/strong&gt; (예시에서 ‘World!’) &lt;strong&gt;는 여전히 stream 에 남아있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 구분자&lt;/strong&gt; (예시에서 공백 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos; &apos;&lt;/code&gt;) &lt;strong&gt;는 stream 에서 버려진다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;는 것이다.&lt;/p&gt;

&lt;p&gt;자 거의 다 왔으니 이제 문자열을 한 번 쪼개보자 !&lt;/p&gt;

&lt;h2 id=&quot;문자열-split-1&quot;&gt;문자열 split (1)&lt;/h2&gt;

&lt;p&gt;우선 코드부터 보여주면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146684886-7be1da94-1e78-4a45-8c1d-078481fefa87.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146684884-c24afa15-c8b6-4135-8ef7-163c8c1662ea.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아까와는 달리 키보드로부터 데이터를 입력받지 않는다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cin&lt;/code&gt; 이라는 stream 은 표준입력장치(키보드) 와 프로그램 사이에서 존재한다. 이번 경우에는 키보드로부터 입력을 받지 않기 때문에 stringstream 중 input 을 담당하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;istringstream&lt;/code&gt; 을 이용한다.&lt;/p&gt;

&lt;p&gt;위 코드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hi my name is Gildong&lt;/code&gt; 을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos; &apos;&lt;/code&gt; 인 공백문자로 쪼갠다. 정확히는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hi my name is Gildong&lt;/code&gt; 이 입력된 &lt;strong&gt;stream&lt;/strong&gt; 에서 공백문자까지 읽어온 후 공백문자를 버린 다음 읽은 문자열을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;temp&lt;/code&gt; 에 저장한다. 그 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt; 라는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;temp&lt;/code&gt; 에 들어있는 값을 저장한다. 매 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문 마다 stream 으로부터 공백문자 전까지 데이터를 읽어와 저장하므로 쪼개진 모든 문자열을 저장할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문은 stream 에 데이터가 끝난 경우, 기대하는 데이터를 읽지 못한 경우, 알 수 없는 이유로 stream 이 손상된 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt; 된다. 더 자세한 사항은 stream state 에 관한 내용 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eofbit&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;badbit&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failbit&lt;/code&gt; 등을 살펴보자.&lt;/p&gt;

&lt;p&gt;위 코드가 c++ 에서 문자열을 단 하나의 문자 기준으로 쪼개는 방법이다. 하지만 여전히 한계점이 존재한다. 위 코드로는 문자열을 또 다른 문자열로 쪼개지는 못한다. 우리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4x^3 + 5x^2 + 7x^1&lt;/code&gt; 을 쪼개려 한다. 이 때 구분자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot; + &quot;&lt;/code&gt; 로 길이가 3인 문자열이다.&lt;/p&gt;

&lt;p&gt;다음 단락에서 이 문제를 해결해보자.&lt;/p&gt;

&lt;h2 id=&quot;문자열-split-2&quot;&gt;문자열 split (2)&lt;/h2&gt;

&lt;p&gt;우리는 두개의 함수를 이용하여 문자열을 또 다른 문자열로 쪼갤 것이다.&lt;/p&gt;

&lt;p&gt;바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 헤더의 함수인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substr&lt;/code&gt; 함수이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; 의 대략적인 사용방법은 다음과 같다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;문자열.find(탐색대상, 탐색시작위치)&lt;/code&gt; - 특정 문자열의 탐색 시작 위치에서부터 탐색을 시작한다. 탐색 대상이 발견된 경우 탐색 대상의 맨 앞이 문자열에서 차지하는 인덱스를 반환해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146686373-41d9e1ab-a370-4f3d-8092-8c9ca641083e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146686354-560cb3bb-aaf5-4cd6-a05a-6de2c5337363.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 다음으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substr&lt;/code&gt; 의 사용법을 알아보자. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substr&lt;/code&gt; 의 대략적인 사용방법은 다음과 같다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;문자열.substr(시작위치, 개수)&lt;/code&gt; - 특정 문자열의 특정 위치로부터 특정 개수만큼의 길이를 가진 부분문자열을 반환하는 함수이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146686519-765135ea-c266-4d19-a90f-4df9b84fbc8c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146686520-172001f6-4d11-466e-9b75-a2c2559175ae.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;드디어 우리는 다항식을 쪼개는데 필요한 지식을 다 배웠다. 다항식은 다음과 같이 쪼개면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146686657-5e7175eb-e0f8-4014-afa5-cf1da5a03b1e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/146686671-f6b268ec-2e0b-41e8-b58b-14c464212241.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;드디어.. 성공했다..&lt;/p&gt;

&lt;p&gt;한편, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; 함수는 특정 인덱스를 찾지 못했을 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npos&lt;/code&gt; 를 return 한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npos&lt;/code&gt; 는 string class 의 최대 허용 문자 수를 의미하며 이 값은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsigned int&lt;/code&gt; 형의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; 값고 동일하다. 이를 인지하고 위 코드를 보면 더욱 잘 이해가 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;댐 사진 출처 - https://builtenvironment.tumblr.com/page/18&lt;/li&gt;
  &lt;li&gt;전반적인 내용 - C++ 기초 플러스 6판&lt;/li&gt;
&lt;/ol&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><category term="ps" /><category term="cpp" /><summary type="html">c++ string split / buffer / stream</summary></entry><entry><title type="html">[Algorithm] 코딩테스트 치트시트</title><link href="https://y00njaekim.github.io/algorithm/%EC%B9%98%ED%8A%B8%EC%8B%9C%ED%8A%B8/" rel="alternate" type="text/html" title="[Algorithm] 코딩테스트 치트시트" /><published>2021-12-05T00:00:00+09:00</published><updated>2021-12-05T22:06:00+09:00</updated><id>https://y00njaekim.github.io/algorithm/%EC%B9%98%ED%8A%B8%EC%8B%9C%ED%8A%B8</id><content type="html" xml:base="https://y00njaekim.github.io/algorithm/%EC%B9%98%ED%8A%B8%EC%8B%9C%ED%8A%B8/">&lt;h2 id=&quot;문자열-자르기&quot;&gt;문자열 자르기&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;sstream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;java c c++ python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;istringstream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;istrstream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;istrstream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\n&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://chbuljumeok1997.tistory.com/42&quot;&gt;[출처]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;조합&quot;&gt;조합&lt;/h2&gt;

&lt;h2 id=&quot;class-정렬&quot;&gt;class 정렬&lt;/h2&gt;

&lt;h2 id=&quot;c-reference&quot;&gt;C++ Reference&lt;/h2&gt;

&lt;p&gt;🚩 priority_queue &lt;a href=&quot;https://www.cplusplus.com/reference/queue/priority_queue/&quot;&gt;[공식문서]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🚩 unordered_map &lt;a href=&quot;https://www.cplusplus.com/reference/unordered_map/unordered_map/&quot;&gt;[공식문서]&lt;/a&gt; &lt;a href=&quot;https://math-coding.tistory.com/31&quot;&gt;[블로그]&lt;/a&gt;&lt;/p&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><category term="ps" /><summary type="html">코팅테스트 치트시트 만들어보아요</summary></entry><entry><title type="html">[React] 리액트 redux 사용 이유</title><link href="https://y00njaekim.github.io/react/redux/" rel="alternate" type="text/html" title="[React] 리액트 redux 사용 이유" /><published>2021-11-30T00:00:00+09:00</published><updated>2021-11-30T22:06:00+09:00</updated><id>https://y00njaekim.github.io/react/redux</id><content type="html" xml:base="https://y00njaekim.github.io/react/redux/">&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt; 를 사용하지 않고 모든 컴포넌트에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 를 가져다 쓸 수 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 관리가 용이하다&lt;/p&gt;

    &lt;p&gt;컴포넌트가 100개 정도 있는 대규모 사이트를 생각해보자. redux 를 이용하지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt; 만 이용하여 컴포넌트 100 곳에서 장바구니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt;를 수정하는 코드를 짰을 때, 중간에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 하나에 이상한 값이 들어와서 버그가 생긴다면 어떡해야 하나. 버그 찾으려고 어딜 뒤져야 하나. 아마 장바구니 state 를 수정하는 100개의 컴포넌트를 다 뒤져야 할 것이다!&lt;/p&gt;

    &lt;p&gt;근데 redux를 만들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 수정 방법을 미리 정해놓으면 위와 같은 버그가 발생하였을 때 redux안의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reducer&lt;/code&gt; 만 잘 들여다보면 된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 데이터가 어떻게 바뀌는지는 reducer에 전부 다 정의 되어있으니까 말이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 데이터의 수정 방법을 index.js에다가 미리 정의해놓는다 (일명 reducer)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원하는 곳에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; 라는 함수를 써서 reducer에게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 를 수정해달라고 요청 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="react" /><category term="코딩애플_리액트" /><category term="react" /><summary type="html">props 쓰면 되는데 redux 는 왜 쓸까</summary></entry><entry><title type="html">[Algorithm] 다이나믹 프로그래밍</title><link href="https://y00njaekim.github.io/algorithm/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="alternate" type="text/html" title="[Algorithm] 다이나믹 프로그래밍" /><published>2021-11-22T00:00:00+09:00</published><updated>2021-11-22T22:06:00+09:00</updated><id>https://y00njaekim.github.io/algorithm/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D</id><content type="html" xml:base="https://y00njaekim.github.io/algorithm/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">&lt;p&gt;내가 생각하는 다이나믹 프로그래밍 문제 풀이 과정은 다음과 같다.&lt;/p&gt;

&lt;p&gt;한 단계 한 단계 살펴보며 디테일한 사항들을 확인하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/142775260-a7662c9c-8bcb-4990-967a-c42b3133ccc8.png&quot; style=&quot;zoom: 30%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-dp-문제임을-인지한다&quot;&gt;1) DP 문제임을 인지한다&lt;/h2&gt;

&lt;p&gt;우선 첫 번째로 내가 풀려하는 문제가 DP 문제임을 인지해야 한다. DP 문제를 풀 때 다음과 같은 생각이 들면 DP 문제임을 의심하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;🙇🏻‍♂️ 음, 이 문제를 어떻게 풀까? 완전 탐색 알고리즘으로 접근해 볼까? (완전 탐색 알고리즘으로 접근해 본다) 헉! 이러면 시간이 너무 많이 걸리는데? 메모리가 너무 많이 사용되는데?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;해를 구하기에 시간 혹은 메모리 공간이 매우 많이 필요하다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🙇🏻‍♂️ 음, 이 문제를 어떻게 풀까? 이렇게 풀면 되려나?. 먼저 이 걸 구하고, 그 다음 이 걸 구하고, 그 다음 .. 어 ?.. 이거 구했던 건데..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;중복되는 연산이 많다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-dp-테이블을-잘-정의한다&quot;&gt;2) DP 테이블을 ‘잘’ 정의한다.&lt;/h2&gt;

&lt;p&gt;DP 문제를 푸는 과정에서 가장 어렵고 가장 중요한 단계이다. 나동빈님은 DP 문제의 특징을 다음과 같이 정의했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🎯 1. 큰 문제를 작은 문제로 나눌 수 있다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🎯 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 &lt;strong&gt;문제&lt;/strong&gt; 라는 단어가 다소 추상적일 수 있다. 나는 &lt;strong&gt;문제를 정의&lt;/strong&gt;한다는 것 은 &lt;strong&gt;DP 테이블의 각 인덱스에 해당하는 값들의 의미를 정의&lt;/strong&gt;한다는 것과 같다고 생각한다.&lt;/p&gt;

&lt;p&gt;DP 문제에서 작은 문제의 정답은 그것을 포함하는 큰 문제에서 사용이 가능하다. 이 때 우리는 DP 테이블의 특정 인덱스의 값을 구하기 위해 다른 인덱스의 값을 사용할 수 있도록 그 의미를 잘 정의해야 한다.&lt;/p&gt;

&lt;p&gt;이것을 여실히 보여주는 문제가 있어서 소개한다. 바로 &lt;strong&gt;백준 #14501 퇴사&lt;/strong&gt; &lt;a href=&quot;https://www.acmicpc.net/problem/14501&quot;&gt;[링크]&lt;/a&gt; 이다.&lt;/p&gt;

&lt;p&gt;맨처음에 해당 문제를 풀 때 DP[i] 의 의미를&lt;/p&gt;

&lt;p&gt;&lt;em&gt;첫 번째 날부터 i 번째 날 까지 낼 수 있는 최대 이익&lt;/em&gt; 이라고 정의하였다.&lt;/p&gt;

&lt;p&gt;이렇게 정의하였을 때 점화식을 세우기 다소 어렵다. 하지만 DP[i] 의 의미를&lt;/p&gt;

&lt;p&gt;&lt;em&gt;i 번째 날 부터 마지막 날까지 낼 수 있는 최대 이익&lt;/em&gt; 이라고 정의하면, 다른 DP[인덱스] 를 이용할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이처럼 DP 테이블을 잘 정의하는 것은 매우 중요하다.&lt;/p&gt;

&lt;h2 id=&quot;3-해에-대응하는-dp-테이블-원소-규정&quot;&gt;3) 해에 대응하는 DP 테이블 원소 규정&lt;/h2&gt;

&lt;p&gt;이 단계는 직전의 DP 테이블을 잘 정의하는 단계와 거의 동시에 진행되어야 한다.&lt;/p&gt;

&lt;p&gt;앞선 문제 예시에서, DP[i] 의 의미를&lt;/p&gt;

&lt;p&gt;&lt;em&gt;첫 번째 날부터 i 번째 날 까지 낼 수 있는 최대 이익&lt;/em&gt; 이라고 정의했을 때는 DP[N] 이 최종 정답이다.&lt;/p&gt;

&lt;p&gt;한 편, &lt;em&gt;i 번째 날 부터 마지막 날까지 낼 수 있는 최대 이익&lt;/em&gt; 이라고 정의하면 DP[0] 이 최종 정답이다.&lt;/p&gt;

&lt;p&gt;이처럼 항상 DP 테이블의 마지막 원소가 정답일 거라고 생각하지 말고, 정답에 대응하는 원소를 잘 찾길 바란다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-점화식을-세운다&quot;&gt;4) 점화식을 세운다&lt;/h2&gt;

&lt;p&gt;점화식은 알아서 잘 세우길 바란다. 이 단계에서는 점화식을 세운 후에 유의점에 대해서 이야기 해보겠다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 초기 항은 dp 테이블에 직접 입력해야 할 수도 있다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 점화식을 다 세웠다면 탑다운으로 코드를 구현할지 바텀업으로 구현할지 생각하자&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 바텀업으로 구현할 계획이라면 dp 테이블을 참조하는 과정에서 segmentation fault 가 발생할 수 있음을 유의하자&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Dp[i] = f(Dp[i-k], …) 라고 세울 수도 있고 Dp[i+k] = f(Dp[i], …) 라고 세울 수도 있다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;코드는 알아서 잘 세우고 짜길 바란다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;한편, DP와 분할정복 알고리즘 모두 큰 문제를 작게 나누어 푸는 방법이다. 차이점은 다이나믹 프로그래밍은 문제들이 서로 영향을 미친다는 것이다. 즉 한 번 해결했던 문제를 다시금 해결해야 하는 상황이 발생한다. 하지만 분할정복 알고리즘의 경우 한 번 해결한 작은 문제를 다시 해결할 일은 없다.&lt;/p&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><category term="ps" /><summary type="html">다이나믹 프로그래밍 문제 풀이 과정</summary></entry><entry><title type="html">[React] 리액트 useEffect 개념 및 사용 방법</title><link href="https://y00njaekim.github.io/react/useEffect/" rel="alternate" type="text/html" title="[React] 리액트 useEffect 개념 및 사용 방법" /><published>2021-10-26T00:00:00+09:00</published><updated>2021-10-26T22:06:00+09:00</updated><id>https://y00njaekim.github.io/react/useEffect</id><content type="html" xml:base="https://y00njaekim.github.io/react/useEffect/">&lt;blockquote&gt;
  &lt;p&gt;해당 포스팅은 컴포넌트에 대한 사전 이해가 필요하다. 컴포넌트에 관련한 내용은 &lt;a href=&quot;https://y00njaekim.github.io/react/Component/&quot;&gt;다음 링크&lt;/a&gt; 에서 살펴보자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-component-life-cycle&quot;&gt;🎯 Component Life Cycle&lt;/h2&gt;

&lt;p&gt;모든 컴포넌트는 생명주기가 있다. 생명 주기가 있다는 의미는 모든 컴포넌트가 &lt;strong&gt;✔️ 등장 ✔️ 업데이트(재렌더링) ✔️ 퇴장&lt;/strong&gt; 을 거치며 자기 역할을 수행한다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 코드를 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./App.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        버튼
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;총 &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;회 클릭하셨습니다.&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 코드에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 컴포넌트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; 컴포넌트의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; 부분을 통해 &lt;strong&gt;등장&lt;/strong&gt;하며 Click 🖱️ 할 때마다 &lt;strong&gt;업데이트&lt;/strong&gt; 되고 마지막으로 &lt;strong&gt;퇴장&lt;/strong&gt;을 거치며 생명주기를 보낸다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/138699000-c86e1d38-01ea-4479-8a1b-53d17591f824.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리는 이 세 개의 컴포넌트 생명주기&lt;strong&gt;(등장-업데이트-퇴장)&lt;/strong&gt;의 순간들에 대하여 특정 명령을 &lt;strong&gt;덧붙일 수&lt;/strong&gt; 있다.&lt;/p&gt;

&lt;p&gt;가령,&lt;/p&gt;

&lt;p&gt;❗&lt;strong&gt;&lt;em&gt;등장하고 나서 ~해주세요&lt;/em&gt; / &lt;em&gt;업데이트 될 때마다 ~해주세요&lt;/em&gt; / &lt;em&gt;퇴장하기 전에 ~ 해주세요&lt;/em&gt;&lt;/strong&gt;❗&lt;/p&gt;

&lt;p&gt;와 같이 말이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예전에, 그니까 클래스로 컴포넌트를 짤 때는, 이를 다음과 같이 사용했다고 한다.&lt;/p&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 등장하고 나서 ~해주세요&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 퇴장하기 전에 ~해주세요&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;지금은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect()&lt;/code&gt; 를 주로 사용하지만 말이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-why-to-use-useeffect&quot;&gt;🎯 Why to use useEffect()&lt;/h2&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./App.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        버튼
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;총 &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;회 클릭하셨습니다.&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; 컴포넌트를 거친 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 컴포넌트가 등장한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 컴포넌트 안에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt; 이라는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state &lt;/code&gt; 가 존재하며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 값이 변경될 때마다 해당 컴포넌트는 업데이트(재렌더링) 된다.&lt;/p&gt;

&lt;p&gt;이 때, &lt;strong&gt;&lt;em&gt;재렌더링 된다&lt;/em&gt;&lt;/strong&gt; 의 의미가 무엇일까?&lt;/p&gt;

&lt;p&gt;바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function Modal() &lt;/code&gt; 에 적힌 &lt;strong&gt;모든 코드가 처음부터 끝까지 다시 실행&lt;/strong&gt;된다는 의미이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서부터 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect() &lt;/code&gt; 를 사용하는 이유가 시작된다. 우리는 이런 질문을 할 수 있다. 정말 &lt;strong&gt;모든 코드&lt;/strong&gt;가 다시 실행되어야 하는 걸까? 이게 효율적이라고 할 수 있을까?&lt;/p&gt;

&lt;p&gt;이에 대한 답변으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; 가 존재한다. 우리가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; 안에 적는 코드들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 컴포넌트가 등장, 업데이트, 퇴장 하는 순간순간에서 무조건적으로 다시 실행되는 것이 아니라 &lt;strong&gt;특정 조건&lt;/strong&gt;이 성립할 때만 다시 실행된다.&lt;/p&gt;

&lt;p&gt;즉, 아래 그림에서 빨간색으로 칠해진 부분은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal()&lt;/code&gt; 이 등장할 때, 업데이트 될 때 무조건 실행되지만 파란색으로 칠해진 부분은 &lt;strong&gt;특정 조건&lt;/strong&gt;을 만족해야만 실행된다.&lt;/p&gt;

&lt;p&gt;그 조건이 무엇인지에 대해서는 &lt;strong&gt;How to use useEffect()&lt;/strong&gt; 에서 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/138708622-887b26e0-d119-4f1e-a7b0-9140c787951a.png&quot; style=&quot;zoom:20%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-how-to-use-useeffect&quot;&gt;🎯 How to use useEffect()&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect()&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect( ( ) =&amp;gt; { }, [ ] )&lt;/code&gt; 와 같은 형식을 갖고있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why to use useEffect()&lt;/strong&gt; 에서 서술했 듯, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect()&lt;/code&gt; 안에 있는 코드는 특정 조건이 성립할 경우에만 반복적으로 실행된다.&lt;/p&gt;

&lt;p&gt;그 경우는 바로 useEffect( ( ) =&amp;gt; { }, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ ]&lt;/code&gt; ) 에서 두 번째 인자로 사용되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ ]&lt;/code&gt; 에 의해 결정된다. 이 대괄호 안에는 특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 변수 명을 적는다. 그 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 가 변경되었을 때, 리액트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect()&lt;/code&gt; 안에 있는 함수를 실행한다.&lt;/p&gt;

&lt;p&gt;그렇기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ ]&lt;/code&gt; 가 비어있는 경우에는, 해당 컴포넌트가 &lt;strong&gt;등장&lt;/strong&gt;할 경우에만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; 안에 있는 함수가 실행될 뿐, 특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 가 업데이트 될 때는 실행되지 않는다.&lt;/p&gt;

&lt;p&gt;다음 코드와 결과를 확인하자.&lt;/p&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./App.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This is Modal!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello useEffect!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; click detected`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bye useEffect!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        버튼
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;총 &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;회 클릭하셨습니다.&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/138707336-f9c398aa-29a9-4bf7-97eb-06aef99753d4.gif&quot; alt=&quot;Gif1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 이 등장하는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 안에 있는 모든 코드들이 실행된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; 를 포함한 모든 코드들이 말이다.&lt;/p&gt;

&lt;p&gt;때문에 옆에 콘솔 창에서 &lt;em&gt;This is Modal!&lt;/em&gt; , &lt;em&gt;Hello useEffect!&lt;/em&gt;, &lt;em&gt;0 clicked detected&lt;/em&gt; 등의 출력을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;하지만&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ ]&lt;/code&gt; 와 같이 대괄호 안이 비어있기 때문에, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 에 존재하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt; state 가 변경되어도 &lt;em&gt;This is Modal!&lt;/em&gt; 만 반복적으로 실행될 뿐, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; 안에 존재하는 &lt;em&gt;Hello useEffect!&lt;/em&gt;, &lt;em&gt;0 clicked detected&lt;/em&gt; 등은 더이상 반복적으로 출력되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 때 대괄호 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt; 을 넣게 된다면 어떻게 될까?&lt;/p&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./App.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This is Modal!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello useEffect!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; click detected`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bye useEffect!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;setClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        버튼
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;총 &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;회 클릭하셨습니다.&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ click ]&lt;/code&gt; 과 같이 대괄호 안에 특정 state 를 작성하면, 우리가 작성한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt; state 가 업데이트 될 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; 안의 코드를 반복적으로 실행한다. 그 결과는 다음과 같다. 출력 창을 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; 안에 작성한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; 들이 반복적으로 실행되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/138707369-cd2dcf7d-014d-49a9-870e-cc95abd3aa70.gif&quot; alt=&quot;Gif2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;한편 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect()&lt;/code&gt; 안에 존재하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;componentWillUnmount&lt;/code&gt; (클래스 방식으로 컴포넌트를 작성하는 경우) 의 역할을 수행한다. 즉, &lt;strong&gt;퇴장하기 전에 ~ 해주세요&lt;/strong&gt; 의 역할을 담당하는 것이다.&lt;/p&gt;

&lt;p&gt;뿐만 아니라, 특정 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 가 업데이트 되는 경우 이전 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;effect&lt;/code&gt; 를 청소하는 기능으로도 사용된다.&lt;/p&gt;

&lt;p&gt;결론적으로 다음 두 개의 역할을 담당한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;dependancy (두 번째 인자로 넘기는 배열) 가 바뀌어서 effect가 달라져야할 때 이전 effect 를 청소하는 용도&lt;/li&gt;
  &lt;li&gt;component가 unmount 되기 직전 (퇴장 직전)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;때문에 위 &lt;strong&gt;GIF&lt;/strong&gt;를 살펴보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click&lt;/code&gt; state 가 변경되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 컴포넌트가 다시 실행될 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modal&lt;/code&gt; 안 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; 에 적은 출력이 실행되어, 콘솔 창에 &lt;em&gt;Bye useEffect!&lt;/em&gt; 가 실행되는 것을 볼 수 있다.&lt;/p&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="react" /><category term="코딩애플_리액트" /><category term="react" /><summary type="html">useEffect 와 컴포넌트 생명주기</summary></entry><entry><title type="html">[CSS] SCSS 개념 및 사용법</title><link href="https://y00njaekim.github.io/css/scss/" rel="alternate" type="text/html" title="[CSS] SCSS 개념 및 사용법" /><published>2021-10-22T00:00:00+09:00</published><updated>2021-10-22T22:06:00+09:00</updated><id>https://y00njaekim.github.io/css/scss</id><content type="html" xml:base="https://y00njaekim.github.io/css/scss/">&lt;p&gt;이번 포스팅에서는 SASS 에 대해 알아보겠다.&lt;/p&gt;

&lt;h2 id=&quot;what&quot;&gt;What?&lt;/h2&gt;

&lt;p&gt;SASS 는 전처리기(Preprocessor)이다. 근데 이제 CSS 로 컴파일 해주는 기능을 곁들인..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;CSS 는 사용하기에 다소 불편한 감이 있다. 프로그래밍을 배우는 입장에서 굳이 CSS 를 그렇게 하나하나 다 입력하고 있어야 하나 라는 생각이 든다.&lt;/p&gt;

&lt;p&gt;하지만 SCSS 는 프로그래밍 언어처럼 기능한다. &lt;strong&gt;변수&lt;/strong&gt;를 사용할 수 있고 다른 CSS 파일을 &lt;strong&gt;import&lt;/strong&gt; 할 수 있으며 CSS 를 &lt;strong&gt;nesting&lt;/strong&gt; 하게 짤 수도 있다. 또한 복붙 대신 &lt;strong&gt;extends&lt;/strong&gt; 를 사용할 수도 있고 함수처럼 기능하는 &lt;strong&gt;mixin, include&lt;/strong&gt; 를 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;위에 기술한 내용에 대해서는 후술할 예정이니 일단은 그냥 되게 편하구나~ 하고 넘어가자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How?&lt;/h2&gt;

&lt;p&gt;우선 SASS 를 설치해야한다&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;node-sass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-변수&quot;&gt;🎯 변수&lt;/h3&gt;

&lt;p&gt;mainColor 라는 변수를 사용하고자 할 때 다음과 같이 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$mainColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#ff0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mainColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-import&quot;&gt;🎯 @import&lt;/h3&gt;

&lt;p&gt;CSS 스타일 중에 자주 시용하는 것을 우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_reset.scss&lt;/code&gt; 라는 이름으로 만들어보자.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// (_reset.scss)&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_reset.scss&lt;/code&gt; 를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.scss&lt;/code&gt; 에 똑같이 적용하려 한다. 이 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; 를 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// (App.scss)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./_reset.scss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-nesting&quot;&gt;🎯 nesting&lt;/h3&gt;

&lt;p&gt;nesting 은 CSS 선택자 중 한칸 띄어쓰기와 동일하게 기능하는 구조로 아래 두 번째 코드와 같이 사용한다.&lt;/p&gt;

&lt;p&gt;즉, 아래 두 코드가 같은 기능을 한다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-extends&quot;&gt;🎯 @extends&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entend&lt;/code&gt; 는 비슷한 스타일이지만 한 끗 다른 스타일을 작성할 때 복사 붙여넣기 대신 쓸 수 있는 기능이다. 다음과 같이 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.my-alert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#eeeeee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.my-alert-yellow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.my-alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-mixin-include&quot;&gt;🎯 @mixin/ @include&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@mixin&lt;/code&gt; 은 함수와 같이 기능한다. 즉 코드를 축약하고 재사용 하는 용도이다. 다음과 같이 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#eeeeee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-alert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;redFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 외에도 SCSS 에는 반복문 등 다양한 기능이 있으니 추가로 찾아보길 바란다.&lt;/p&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="css" /><category term="css" /><category term="scss" /><category term="react" /><category term="코딩애플" /><summary type="html">CSS 를 보다 편리하게 쓸 수 있게 해주는 SCSS</summary></entry><entry><title type="html">[React] 리액트 promise 란?</title><link href="https://y00njaekim.github.io/react/promise/" rel="alternate" type="text/html" title="[React] 리액트 promise 란?" /><published>2021-10-20T00:00:00+09:00</published><updated>2021-10-20T22:06:00+09:00</updated><id>https://y00njaekim.github.io/react/promise</id><content type="html" xml:base="https://y00njaekim.github.io/react/promise/">&lt;blockquote&gt;
  &lt;p&gt;아직 완성되지 않은 포스팅이라 후에 작성할 때 기준 삼을 간단한 구조를 미리 첨부한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/138043536-7eba2bef-75eb-48c8-bbd9-6b21dbbf837d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Promise&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What?
    &lt;ol&gt;
      &lt;li&gt;오브젝트. 오브젝트 안에 오브젝트를 포함하는 형태&lt;/li&gt;
      &lt;li&gt;Promise[프로미스]는 자바스크립트에서 비동기 처리에 사용되는 객체라고 한다. 비동기 처리는 코드 실행 후 결과를 받는것을 기다리지 않고 다음 코드를 계속 진행하는 처리 방식을 말한다. (동기 처리는 반대로 앞선 코드를 수행하고 그 결과를 받을 때 까지 기다린 다음에 수행하는 것을 말한다)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;await
    &lt;ol&gt;
      &lt;li&gt;기능
        &lt;ol&gt;
          &lt;li&gt;await은 내 메소드의 실행을 일시중지시킵니다. promise의 값이 사용가능할 때까지요.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;참조
Link: https://velog.io/@limes/React-Async-await&lt;/li&gt;
      &lt;li&gt;Why?
        &lt;ol&gt;
          &lt;li&gt;async/await 키워드를 사용하면 비동기 코드를 마치 동기 코드처럼 보이게 작성할 수 있다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;개념 이해를 위한,
    &lt;ol&gt;
      &lt;li&gt;promise 를 사용하여 구현 vs async/await 를 사용하여 구분
        &lt;ol&gt;
          &lt;li&gt;비동기 = promise =&amp;gt; await 를 통해 동기처럼 기능하게 만듦&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Promise 의 세가지 상태
    &lt;ol&gt;
      &lt;li&gt;Pending(대기)&lt;/li&gt;
      &lt;li&gt;Fulfilled(이행)&lt;/li&gt;
      &lt;li&gt;Rejected(실패)&lt;/li&gt;
      &lt;li&gt;콜백 함수
        &lt;ol&gt;
          &lt;li&gt;resolve&lt;/li&gt;
          &lt;li&gt;reject&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;참조
Link: https://dev-room.tistory.com/61&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;How?
    &lt;ol&gt;
      &lt;li&gt;Promise 객체에는 정상적으로 비동기 작업이 완료되었을 때 호출하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; 이라는 API 가 존재한다. then(param1, param2) 의 형태에서 param1 에는 성공시(promise fulfilled) 호출할 함수를, param2 에는 실패시(promise rejected) 호출할 함수를 선언한다.
        &lt;ol&gt;
          &lt;li&gt;참조
Link: https://programmingsummaries.tistory.com/325&lt;/li&gt;
          &lt;li&gt;Error 를 잡는 promise catch api 도 같이 사용할 수 있다&lt;/li&gt;
          &lt;li&gt;❓ then 은 비동기를 동기로 만드는 await 의 기능을 내포하는 건가??
            &lt;ol&gt;
              &lt;li&gt;✋🏻 둘 다 비동기를 처리하는 방식임! await 를 써도 되고 then 을 써도 되고 그런거. 같은 기능이긴 함. 근데 뭐가 더 섹시 코드인지는 살펴보아야 할 듯&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="react" /><category term="react" /><summary type="html">리액트 promise</summary></entry><entry><title type="html">[Algorithm] 문자열 압축 - 구현</title><link href="https://y00njaekim.github.io/algorithm/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95/" rel="alternate" type="text/html" title="[Algorithm] 문자열 압축 - 구현" /><published>2021-10-11T00:00:00+09:00</published><updated>2021-10-12T03:07:00+09:00</updated><id>https://y00njaekim.github.io/algorithm/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95</id><content type="html" xml:base="https://y00njaekim.github.io/algorithm/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%95%EC%B6%95/">&lt;p&gt;이번 포스팅에서는 &lt;strong&gt;문자열 압축&lt;/strong&gt; 이라는 문제를 다룬다. 문제는 &lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/60057&quot;&gt;프로그래머스&lt;/a&gt;를 통해 풀고 오길 바란다.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ndb796/python-for-coding-test/blob/master/12/3.cpp&quot;&gt;나동빈님의 코드&lt;/a&gt;를 짧게 분석해보며 문제에서 얻을 수 있는 포인트들을 챙겨보자.&lt;/p&gt;

&lt;p&gt;코드는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1개 단위(step)부터 압축 단위를 늘려가며 확인&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 앞에서부터 step만큼의 문자열 추출&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 단위(step) 크기만큼 증가시키며 이전 문자열과 비교&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 이전 상태와 동일하다면 압축 횟수(count) 증가&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 다른 문자열이 나왔다면(더 이상 압축하지 못하는 경우라면)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;compressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다시 상태 초기화&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 남아있는 문자열에 대해서 처리&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 만들어지는 압축 문자열이 가장 짧은 것이 정답&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;우선 문제를 접한 후 가장 먼저 &lt;strong&gt;시간 복잡도&lt;/strong&gt;에 대하여 생각해봐야 한다.&lt;/p&gt;

&lt;p&gt;특정 압축 길이 단위가 주어졌을 때 그 길이를 기준으로 문자열을 압축하는 시간 복잡도는 선형적, $O(n)$ 임을 생각할 수 있다.&lt;/p&gt;

&lt;p&gt;문제에서 문자열의 최대 길이는 1000 이라고 명시되어 있다.&lt;/p&gt;

&lt;p&gt;우리는 문자열 길이의 반절 길이, 즉 1부터 500까지를 압축 단위로 설정하여 문자열을 압축할 수 있다.&lt;/p&gt;

&lt;p&gt;때문에 총 시간복잡도는 $O((n/2)n) = O(n^2)$ 임을 알 수 있다.&lt;/p&gt;

&lt;p&gt;기본적으로 이러한 컨셉으로 이 문제에 접근하면 된다.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;이 문제에서 내가 주목한 부분은 디테일한 것들이다.&lt;/p&gt;

&lt;p&gt;그 첫 번째로,&lt;/p&gt;

&lt;h3 id=&quot;for-문의-처음과-끝에-주목하는-태도&quot;&gt;for 문의 처음과 끝에 주목하는 태도&lt;/h3&gt;

&lt;p&gt;이다.&lt;/p&gt;

&lt;p&gt;이 문제에서는 &lt;strong&gt;끝에 주목&lt;/strong&gt;해야 하지만 어떤 문제에서는 처음에 주목해야 할 지 모른다.&lt;/p&gt;

&lt;p&gt;나동빈님은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cnt&lt;/code&gt; 를 증가시키며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cnt&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prev&lt;/code&gt; 를 통해 압축된 문자열 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compressed&lt;/code&gt; 를 만들어 나간다.&lt;/p&gt;

&lt;p&gt;이 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compressed&lt;/code&gt; 가 갱신되는 것은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; 에 해당할 때이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;하지만 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; 문의 마지막 경우에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else &lt;/code&gt; 가 나오지 않는다면?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 질문을 하는 것이 아주 중요하며, 나동빈님은 이 질문에 대한 대답으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; 문 밖에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compressed&lt;/code&gt; 를 최종적으로 갱신하는 코드를 작성하였다.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;이 문제에서 챙겨가면 좋을 것들로 cpp 에서 사용하는 string method 들이 있다.&lt;/p&gt;

&lt;p&gt;첫 째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substr&lt;/code&gt; 이며, 둘 째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare&lt;/code&gt; , 마지막으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_string&lt;/code&gt; 이 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substr&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substr(pos, len)&lt;/code&gt; 과 같이 사용한다. 자세한 사항은 &lt;a href=&quot;https://www.cplusplus.com/reference/string/string/substr/&quot;&gt;다음&lt;/a&gt;을 참고하자. 가장 중요한 것은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substr&lt;/code&gt; 이 기존 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; 의 길이를 초과하여 부분 문자열을 만들려고 할 때, &lt;strong&gt;method 자체에서 문자열의 최대길이까지만 참고&lt;/strong&gt; 한다는 것이다. 이건 분명하게 기억해두자.&lt;/p&gt;

&lt;p&gt;둘 째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare&lt;/code&gt; 이며 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str1.compare(str2) == 0&lt;/code&gt; 과 같은 방법으로 사용되는 데 사실 이건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str1 == str2&lt;/code&gt; 와 같은 기능을 한다.&lt;/p&gt;

&lt;p&gt;셋 째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_string&lt;/code&gt; 으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; 를 문자열로 만들 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_string(3)&lt;/code&gt; 과 같이 사용하면 된다.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;또한 다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compressed += (cnt &amp;gt;= 2)? to_string(cnt) + prev : prev;&lt;/code&gt; &lt;strong&gt;삼항 조건 연산자&lt;/strong&gt;를 사용할 수 있음을 알아두면 좋다.&lt;/p&gt;

&lt;p&gt;나동빈님은 &lt;strong&gt;문자열을 직접 만들어 가며&lt;/strong&gt; 그 길이를 참조하셨다. 나는 처음에 이 문제를 풀 때 압축할 수 있든 부분의 개수를 파악해가며 이를 이용하여 압축된 문자열의 길이를 계산하였다. 나동빈님처럼 문자열을 직접 만들 수 있음을 기억하는 것도 좋을 것 같다.&lt;/p&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><category term="ps" /><category term="cpp" /><summary type="html">for 문을 대하는 태도</summary></entry><entry><title type="html">[Algorithm] 무지의 먹방 라이브 - 그리디 알고리즘</title><link href="https://y00njaekim.github.io/algorithm/%EB%AC%B4%EC%A7%80%EC%9D%98%EB%A8%B9%EB%B0%A9%EB%9D%BC%EC%9D%B4%EB%B8%8C/" rel="alternate" type="text/html" title="[Algorithm] 무지의 먹방 라이브 - 그리디 알고리즘" /><published>2021-10-09T00:00:00+09:00</published><updated>2021-09-14T22:06:00+09:00</updated><id>https://y00njaekim.github.io/algorithm/%EB%AC%B4%EC%A7%80%EC%9D%98%EB%A8%B9%EB%B0%A9%EB%9D%BC%EC%9D%B4%EB%B8%8C</id><content type="html" xml:base="https://y00njaekim.github.io/algorithm/%EB%AC%B4%EC%A7%80%EC%9D%98%EB%A8%B9%EB%B0%A9%EB%9D%BC%EC%9D%B4%EB%B8%8C/">&lt;blockquote&gt;
  &lt;p&gt;이 문제의 제목은 &lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42891&quot;&gt;무지의 먹방 라이브&lt;/a&gt;이다.&lt;/p&gt;

  &lt;p&gt;상당히 인상깊은 내용이 많아 이렇게 따로 기록하려 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 내가 &lt;strong&gt;처음에 작성한&lt;/strong&gt; 코드의 구조를 살펴보자&lt;/p&gt;

&lt;p&gt;⬇️ 🖥️ &lt;strong&gt;My Code&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;queue&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getZeroCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1e9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getZeroCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
        ...
        food_times 갱신
        k 갱신
        ...
    */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*

    ...

    */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;내가 생각하는 이 문제의 핵심은 &lt;strong&gt;알맞은 자료구조&lt;/strong&gt;의 사용이다.&lt;/p&gt;

&lt;p&gt;결론부터 말하자면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt; 가 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priority queue&lt;/code&gt; 를 사용해야 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-priority-queue-를-사용하겠다는-발상을-어떻게-하는가&quot;&gt;그렇다면 priority queue 를 사용하겠다는 발상을 어떻게 하는가?&lt;/h3&gt;

&lt;p&gt;라는 질문으로 넘어갈 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 문제에서 priority queue 를 사용하게 유도하는 부분은&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문 안에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getMin()&lt;/code&gt; 을 반복해서 호출한다는 것이다.&lt;/p&gt;

&lt;p&gt;우선순위 큐는 &amp;lt;&lt;strong&gt;여러 개의 값들 중에서 최댓값이나 최솟값을 빠르게 찾아내도록 만들어진, 일종의 반정렬 상태를 유지&lt;/strong&gt;&amp;gt; 하는 자료구조이다.&lt;/p&gt;

&lt;p&gt;때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getMin()&lt;/code&gt; 을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt; 에 대하여 반복적으로 호출하는 것보다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priority queue&lt;/code&gt; 를 이용하는 게 훨씬 효율적임을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;이 문제의 정답 코드를 보며 이야기를 계속 하고자 한다.&lt;/p&gt;

&lt;p&gt;⬇️ 🖥️ &lt;strong&gt;나동빈 님의 Code&lt;/strong&gt; ⬇️ &lt;a href=&quot;https://github.com/ndb796/python-for-coding-test/blob/master/11/6.cpp&quot;&gt;(깃헙 주소)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 전체 음식을 먹는 시간보다 k가 크거나 같다면 -1&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 시간이 작은 음식부터 빼야 하므로 우선순위 큐를 이용&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;priority_queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (음식 시간, 음식 번호) 형태로 우선순위 큐에 삽입&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 먹기 위해 사용한 시간&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 직전에 다 먹은 음식 시간&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 남은 음식의 개수&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// summary + (현재의 음식 시간 - 이전 음식 시간) * 현재 음식 개수와 k 비교&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다 먹은 음식 제외&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이전 음식 시간 재설정&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 남은 음식 중에서 몇 번째 음식인지 확인하여 출력&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;food_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;food_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 음식의 번호 기준으로 정렬&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 이 정답코드에서 인상적으로 느낀 &lt;strong&gt;4개의 포인트&lt;/strong&gt;에 대하여 말해보고자 한다.&lt;/p&gt;

&lt;p&gt;우선 나동빈 님은,&lt;/p&gt;

&lt;h3 id=&quot;예외-케이스를-가장-먼저-작성하였다&quot;&gt;예외 케이스를 가장 먼저 작성하였다.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solution()&lt;/code&gt; 함수 상단을 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (summary &amp;lt;= k) return -1;&lt;/code&gt; 이 적혀있는 줄을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;문제에서는 분명 &amp;lt;&lt;strong&gt;만약 더 섭취해야 할 음식이 없다면 -1을 반환하면 된다.&lt;/strong&gt;&amp;gt; 고 말했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 문제를 해결하는 알고리즘을 &lt;strong&gt;그대로 이용하여&lt;/strong&gt; 문제를 풀 수 없음을, 즉 -1을 반환해야 함을 보이려고 했다.&lt;/p&gt;

&lt;p&gt;하지만 나동빈님은 문제를 풀 수 없음을 보이는 알고리즘을 &lt;strong&gt;따로 분리하여&lt;/strong&gt; 코드 최상단에 작성하였다.&lt;/p&gt;

&lt;p&gt;풀 수 없는 문제에 대하여 &lt;strong&gt;가장 빠르게 풀 수 없음을 보이는 알고리즘을 따로 작성&lt;/strong&gt;했다는 말이다.&lt;/p&gt;

&lt;p&gt;이 점이 첫 번째로 인상깊었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;두 번째로 인상깊은 점은 나동빈님이 주어진 &lt;strong&gt;k 를 취급하는 방식&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;나는 내가 작성한 코드의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solution()&lt;/code&gt; 함수 안의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문에서 k 값을 갱신해가며 답을 도출하려고 시도했다.&lt;/p&gt;

&lt;p&gt;하지만 나동빈님의 코드를 살펴보면,&lt;/p&gt;

&lt;h3 id=&quot;k-값이-변하지-않음을-immutable-속성을-유지함을-볼-수-있다&quot;&gt;k 값이 변하지 않음을, immutable 속성을 유지함을 볼 수 있다.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나동빈님은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문 안에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;summary&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;previous&lt;/code&gt; 를 갱신한다.&lt;/p&gt;

&lt;p&gt;그리고 그 갱신 값의 연산 값과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; 를 비교하는 식으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문의 조건식을 수립한다.&lt;/p&gt;

&lt;p&gt;사실 문제에서 주어진 정보 변수를 변화시키는 것이 그렇게 바람직하게 느껴지지 않았다.&lt;/p&gt;

&lt;p&gt;앞으로 코드를 작성할 때 이렇게 &lt;strong&gt;특정 변수의 immutability 를 유지시키는 방향&lt;/strong&gt;으로 코드를 작성해야겠다는 생각이 들어 기록한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;세 번째,&lt;/p&gt;

&lt;h3 id=&quot;while-문의-조건식과-while-문-안의-수식이-유사한-구조를-갖는다&quot;&gt;while 문의 조건식과 while 문 안의 수식이 유사한 구조를 갖는다.&lt;/h3&gt;

&lt;p&gt;코드를 작성하다보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문 안의 코드가 더럽게 마구잡이로 작성될 때가 있다.&lt;/p&gt;

&lt;p&gt;하지만 나동빈님의 코드를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문의 조건식으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;summary + ((-pq.top().first - previous) * length&lt;/code&gt; 이 들어가있다.&lt;/p&gt;

&lt;p&gt;또한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; 문 안에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;summary += (now - previous) * length;&lt;/code&gt; 의 코드를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;조건식과 내부식이 비슷한 구조를&lt;/strong&gt; 유지하는 것, 깔끔하게 코드를 작성하는 방법임을 기억하고 적용해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마지막이다.&lt;/p&gt;

&lt;p&gt;마지막은 어떤 착안점으로부터 발상할 수 있는지 아직 잘 파악하지 못했다.&lt;/p&gt;

&lt;p&gt;아직까지 그저 창의성, 대단함 등으로 여겨진다.&lt;/p&gt;

&lt;p&gt;어떤 부분에서 인상이 깊었냐 하면, 바로&lt;/p&gt;

&lt;h3 id=&quot;compare-함수를-만들고-priority-queue-의-원소들을-vector-에-다시-넣어-compare-의-방식으로-재정렬을-시키는-부분이다&quot;&gt;compare 함수를 만들고 priority queue 의 원소들을 vector 에 다시 넣어 compare 의 방식으로 재정렬을 시키는 부분이다.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 챙겨갈 수 있는 내용은,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;같은 원소를 가진 자료를 이용할 때 서로 다른 두개의 방식으로 각각 정렬하여 이용할 수 있다는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pair.first&lt;/code&gt; 를 기준으로 내림차순 정렬된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priority queue&lt;/code&gt; 를 이용함과 동시에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pair.second&lt;/code&gt; 를 기준으로 올림차순 정렬된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector&lt;/code&gt; 또한 이용한다.&lt;/p&gt;

&lt;p&gt;뭐, 인상깊었다.&lt;/p&gt;

&lt;p&gt;일단은 이렇게 정리한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 문제를 한 줄로 요약하자면&lt;/p&gt;

&lt;p&gt;줄 건 주고 다시 생각해보자? 인 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priority queue&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;front&lt;/code&gt; 에 해당하는 할당량을 애초에 먼저 내어주는 느낌이랄까.&lt;/p&gt;

&lt;p&gt;잘 이해하길 바란다.&lt;/p&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><category term="ps" /><summary type="html">이것이 코딩 테스트다, 카카오 문제 풀이</summary></entry><entry><title type="html">[CSS] CSS 선택자 종류</title><link href="https://y00njaekim.github.io/css/css-%EC%84%A0%ED%83%9D%EC%9E%90/" rel="alternate" type="text/html" title="[CSS] CSS 선택자 종류" /><published>2021-10-06T00:00:00+09:00</published><updated>2021-10-06T22:06:00+09:00</updated><id>https://y00njaekim.github.io/css/css-%EC%84%A0%ED%83%9D%EC%9E%90</id><content type="html" xml:base="https://y00njaekim.github.io/css/css-%EC%84%A0%ED%83%9D%EC%9E%90/">&lt;p&gt;이 글은 생활코딩 &lt;a href=&quot;https://opentutorials.org/course/2418/13339&quot;&gt;CSS 수업&lt;/a&gt;을 정리하는 목적으로 작성하였다. 강의와 더불어 참고하길 바란다.&lt;/p&gt;

&lt;h2 id=&quot;선택자-selector&quot;&gt;선택자 (selector)&lt;/h2&gt;

&lt;p&gt;css 파일을 열어보면 다음과 같은 문법을 볼 수 있었을 거다. 이 때 이 안의 다음과 같은 명칭의 표현들이 존재함을 알아야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/136027915-fa6172a4-fbac-4900-947e-785661eff634.png&quot; alt=&quot;2z4a3yh4&quot; style=&quot;zoom:30%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;🎯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selector&lt;/code&gt;: &lt;strong&gt;style sheet 을 적용시킬 대상&lt;/strong&gt;을 지칭한다.&lt;/p&gt;

&lt;p&gt;🎯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt;: style sheet 을 작성할 때 그 목적이 되는 구체적 style 을 의미한다.&lt;/p&gt;

&lt;p&gt;🎯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt; 에 넣을 값을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;선택자의-종류&quot;&gt;선택자의 종류&lt;/h3&gt;

&lt;p&gt;선택자(selector) 는 여러가지 종류가 있다. 즉 style sheet 을 적용시킬 대상을 지칭할 때 그 표현의 방법이 여러가지 있다는 뜻이다. 다음은 그 종류이다.&lt;/p&gt;

&lt;p&gt;🎯 태그 선택자 (tag selector, type selector)&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* html 태그를 지칭하여 style sheet 을 적용한다 */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;🎯 클래스 선택자 (class selector)&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* class 를 지칭하여 style sheet 을 적용한다 */&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;🎯 아이디 선택자 (id selector)&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* id 를 지칭하여 style sheet 을 적용한다 */&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 때 기억해야할 점은 &lt;strong&gt;선택자는 분명하게 지칭될 수록 우선순위가 높게 작용한다&lt;/strong&gt;는 것이다.&lt;/p&gt;

&lt;p&gt;예를들어 다음과 같은 코드가 있다 할 때 &lt;strong&gt;아이디 선택자가 가장 분명한 선택자&lt;/strong&gt; 이므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1 class=&apos;title&apos; id=&apos;title&apos;/&amp;gt;&lt;/code&gt; 의 색상은 빨간색이 된다.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* &amp;lt;h1 class=&apos;title&apos; id=&apos;title&apos;/&amp;gt; 이라는 html 태그가 존재한다고 가정하자 */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;부모-자손-선택자-descendant-selector&quot;&gt;부모 자손 선택자 (descendant selector)&lt;/h3&gt;

&lt;p&gt;만약 html 태그 안에 또 다른 html 태그가 있을 때, 우리는 그 관계를 부모자손 관계라고 부른다.&lt;/p&gt;

&lt;p&gt;css 에서는 부모자손 관계를 선택자에서 이용할 수 있다. 그 종류는 다음과 같다.&lt;/p&gt;

&lt;p&gt;🎯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(띄어쓰기)&lt;/code&gt; , &lt;strong&gt;자손&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;첫 번째는 띄어쓰기를 이용하여 선택자를 구성하는 방법이다.&lt;/p&gt;

&lt;p&gt;이 것은 앞에 나온 선택자의 자손 중 뒤에 나온 선택자가 존재할 때 style sheet 이 적용되는 상황이다.&lt;/p&gt;

&lt;p&gt;이 때 기억해야할 점은 뒤에 나온 선택자가 앞에 나온 선택자의 &lt;strong&gt;몇 번째 자손이든 상관 없이 자손이기만 하면 된다&lt;/strong&gt;는 것이다.&lt;/p&gt;

&lt;p&gt;아래 코드 중 첫 번째 블럭의 의미는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ul&lt;/code&gt; 태그의 자손 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;li&lt;/code&gt; 태그를 선택자로 삼아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; 에 등장하는 style sheet 을 적용시킨다는 의미이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;🎯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; , &lt;strong&gt;직계자손&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;두 번째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 를 이용하여 선택자를 구성하는 방법이다&lt;/p&gt;

&lt;p&gt;이 것은 앞에 나온 선택자의 &lt;strong&gt;직계 자손&lt;/strong&gt;(depth =1) 중 뒤 나온 선택자가 존재할 때 style sheet 이 적용되는 상황이다.&lt;/p&gt;

&lt;p&gt;이 때 기억해야할 점은 뒤에 나온 선택자는 앞에 나온 선택자의 첫 번째 , 즉 직계 자손이어야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;아래 코드 중 두 번째 블럭의 의미는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#lecture&lt;/code&gt; 아이디의 직계 자손 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;li&lt;/code&gt; 태그를 선택자로 삼아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; 에 등장하는 style sheet 을 적용시킨다는 의미이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;🎯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; , &lt;strong&gt;병렬&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;세 번째는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; 를 이용하여 선택자를 구성하는 방법이다.&lt;/p&gt;

&lt;p&gt;이 것은 간단하다! 그냥 병렬을 의미한다.&lt;/p&gt;

&lt;p&gt;아 래 코드 중 세 번째 블럭의 의미는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ul&lt;/code&gt; 태그와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ol&lt;/code&gt; 태그 모두에게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; 에 등장하는 style sheet 을 적용시킨다는 의미이다.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#lecture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;powderblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;가상-클래스-선택자-psuedo-class-selector&quot;&gt;가상 클래스 선택자 (psuedo class selector)&lt;/h3&gt;

&lt;p&gt;다음과 같은 코드가 있다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:visited&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:active&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:focus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.naver.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;방문함&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.daum.net&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;방문함&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 코드를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:link&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:visited&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:hover&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:active&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:focus&lt;/code&gt; 등이 있다. 이를 &lt;strong&gt;가상 클래스 선택자&lt;/strong&gt; 라고 부른다. 이 의미는 다음과 같다.&lt;/p&gt;

&lt;p&gt;✔️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:link&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그의 기본적인 상태를 지칭하는 선택자&lt;/p&gt;

&lt;p&gt;✔️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:visited&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그가 방문된 상태를 지칭하는 선택자&lt;/p&gt;

&lt;p&gt;✔️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:hover&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그에 마우스를 올려 놓은 상태를 지칭하는 선택자&lt;/p&gt;

&lt;p&gt;✔️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:active&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그가 클릭된 상태를 지칭하는 선택자&lt;/p&gt;

&lt;p&gt;✔️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a:focusing&lt;/code&gt; : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그가 focusing 된 상태를 지칭하는 선택자&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;추가-정보&quot;&gt;추가 정보&lt;/h3&gt;

&lt;h4 id=&quot;css-cheat-sheet&quot;&gt;css cheat sheet&lt;/h4&gt;

&lt;p&gt;추가적으로 css cheat sheet 를 첨부한다. 필요시 참고하길 바란다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/56385667/136037767-805bee59-95af-427a-bddc-cd80867694b4.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;css-선택자-연습-사이트&quot;&gt;css 선택자 연습 사이트&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://flukeout.github.io/&quot;&gt;다음 사이트&lt;/a&gt; 에서 css 선택자를 고르는 연습을 할 수 있다. 참고하자 !&lt;/p&gt;</content><author><name>YoonJae Kim</name><email>keymy00njae@gmail.com</email></author><category term="css" /><category term="css" /><category term="react" /><summary type="html">cascading style sheets 의 선택자 종류를 알아보자</summary></entry></feed>